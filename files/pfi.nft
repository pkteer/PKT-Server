define nocjdns_mark = 0xcf
define cjdns_mark = 0xfc

define p_management = "1:fffe"
define p_speedtest = "1:fffd"
define p_cjdns = "1:fffc"


table ip pfi
flush table ip pfi
table ip pfi {
  # Maps and tables
  map m_client_leases {
    type ipv4_addr : classid;
  }
  set s_client_leases {
    type ipv4_addr;
  }
  map m_reverse_ports {
    type inet_service : ipv4_addr;
  }
  set s_reverse_ports {
    type inet_service;
  }
  chain default_lease {
    meta priority set "1:ffff" counter accept
  }

  chain vpn {
    tcp flags syn tcp option maxseg size set rt mtu
    ip daddr @s_client_leases meta priority set ip daddr map @m_client_leases counter accept
    ip saddr @s_client_leases meta priority set ip saddr map @m_client_leases counter accept
    counter goto default_lease
  }

  chain reverse_vpn {
    type nat hook prerouting priority dstnat;
    ip daddr $PUBLIC_IP tcp dport @s_reverse_ports counter dnat to tcp dport map @m_reverse_ports
  }

  chain forward {
    type filter hook forward priority filter; 
    iifname $device_name oifname tun0 ct state related,established counter accept
    iifname tun0 oifname $device_name counter accept
    iifname $device_name tcp flags syn tcp option maxseg size set 1264
    oifname == tun0 tcp sport 64764 counter accept
    oifname == tun0 counter goto vpn
    iifname == tun0 tcp dport 64764 counter accept
    iifname == tun0 counter goto vpn
  }

  chain postrouting {
      type nat hook postrouting priority srcnat; 
      oifname $device_name masquerade
  }

  chain route_output {
    type route hook output priority mangle; # -150
    skuid cjdns meta priority set $p_cjdns counter accept
    skuid speedtest meta priority set $p_speedtest counter accept
    meta priority set $p_management counter accept
  }
}
